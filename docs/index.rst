.. pyod documentation master file, created by
   sphinx-quickstart on Sun May 27 10:56:38 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to PyThresh Documentation
=================================

**Deployment, Stats, & License**

.. image:: https://img.shields.io/pypi/v/pythresh.svg?color=brightgreen&logo=pypi&logoColor=white
   :target: https://pypi.org/project/pythresh/
   :alt: PyPI version

.. image:: https://readthedocs.org/projects/pythresh/badge/?version=latest
   :target: http://pythresh.readthedocs.io/?badge=latest
   :alt: Documentation status

.. image:: https://github.com/KulikDM/pythresh/actions/workflows/python-package.yml/badge.svg
   :target: https://github.com/KulikDM/pythresh/actions/workflows/python-package.yml
   :alt: testing

.. image:: https://codecov.io/gh/KulikDM/pythresh/branch/main/graph/badge.svg?token=8ZAPXTLW9Y 
   :target: https://codecov.io/gh/KulikDM/pythresh
   :alt: Codecov

.. image:: https://img.shields.io/github/stars/KulikDM/pythresh.svg?logo=github&logoColor=white
   :target: https://github.com/KulikDM/pythresh/stargazers
   :alt: GitHub stars

.. image:: https://pepy.tech/badge/pythresh?
   :target: https://pepy.tech/project/pythresh
   :alt: Downloads
   
.. image:: https://img.shields.io/pypi/pyversions/pythresh.svg?logo=python&logoColor=white
   :target: https://pypi.org/project/pythresh/
   :alt: Python versions
  
.. image:: https://img.shields.io/github/license/KulikDM/pythresh.svg
   :target: https://github.com/KulikDM/pythresh/blob/master/LICENSE
   :alt: License


-----

PyThresh is a comprehensive and scalable **Python toolkit** for **thresholding outlier detection scores** in univariate/multivariate data. It has been writen to work in tandem with PyOD and has similar syntax and data structures. However, it is not limited to this single library. PyThresh is meant to threshold scores generated by an outlier detection. It thresholds scores without the need to set a contamination level or have the user guess the amount of outliers that may exist in the dataset beforehand. These non-parametric methods were written to reduce the user's input/guess work and rather rely on statistics instead to threshold outlier scores. For thresholding to be applied correctly, the outlier detection scores must follow this rule: the higher the score, the higher the probability that it is an outlier in the dataset. All threshold functions return a binary array where inliers and outliers are represented by a 0 and 1 respectively. 

PyThresh includes more than 30 thresholding algorithms. These algorithms range from using simple statistical analysis like the Z-score to more complex mathematical methods that involve graph theory and topology. 


**API Demo**\ :


.. code-block:: python


    # train the KNN detector
    from pyod.models.knn import KNN
    from pythresh.thresholds.dsn import DSN
    
    clf = KNN()
    clf.fit(X_train)

    # get outlier scores
    decision_scores = clf.decision_scores_  # raw outlier scores on the train data
    
    # get outlier labels 
    thres = DSN()
    labels = thres.eval(decision_scores)



----

Available Thresholding Algorithms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

=========== ================================================================ =========================
Abbr        Description                                                      Ref    
=========== ================================================================ =========================
AUCP        Area Under Curve Precentage                                      :cite:`a-ren2018aucp`
BOOT        Bootstrapping                                                    :cite:`a-martin2006boot`
CHAU        Chauvenet's Criterion                                            :cite:`a-bolshev2016chau`
CLF         Trained Classifier                                               :cite:`a-aggarwal2017clf`
CLUST       Clustering Based                                                 :cite:`a-klawonn2008clust`
DSN         Distance Shift from Normal                                       :cite:`a-amagata2021dsn`
EB          Elliptical Boundary                                              :cite:`a-friendly2013eb`
FGD         Fixed Gradient Descent                                           :cite:`a-qi2021fgd`
FILTER      Filtering Based                                                  :cite:`a-hashemi2019filter`
FWFM        Full Width at Full Minimum                                       :cite:`a-joneidi2013fwfm`
GESD        Generalized Extreme Studentized Deviate                          :cite:`a-alrawashdeh2021gesd`
HIST        Histogram Based                                                  :cite:`a-thanammal2015hist`
IQR         Inter-Quartile Regression                                        :cite:`a-bardet2015iqr`
KARCH       Karcher mean (Riemannian Center of Mass)                         :cite:`a-afsari2011karch`
KMEANS      K-means Clustering                                               :cite:`a-dey2017kmeans`
MAD         Median Absolute Deviation                                        :cite:`a-archana2015mad`
MCST        Monte Carlo Shapiro Tests                                        :cite:`a-coin2008mcst`
MOLL        Friedrichs' Mollifier                                            :cite:`a-keyzer1997moll`
MTT         Modified Thompson Tau Test                                       :cite:`a-rengasamy2020mtt`
OCSVM       One-Class Support Vector Machine                                 :cite:`a-barbado2022ocsvm`
QMCD        Quasi-Monte Carlo Discreprancy                                   :cite:`a-iouchtchenko2019qmcd`
REGR        Regression Based                                                 :cite:`a-aggarwal2017clf`
SHIFT       Mean Shift Clustering                                            :cite:`a-yang2021shift`
WIND        Topological Winding Number                                       :cite:`a-jacobson2013wind`
YJ          Yeo-Johnson Transformation                                       :cite:`a-raymaekers2021yj`
ZSCORE      Z-score                                                          :cite:`a-bagdonavicius2020zscore`
ALL         All Thresholders Combined                                        
=========== ================================================================ =========================

**The comparison among of implemented models** is made available below
(\ `Figure <https://raw.githubusercontent.com/KulikDM/pythresh/main/imgs/All.png>`_\).
For Jupyter Notebooks, please navigate to **"/notebooks/Compare All Thesholders.ipynb"**.


.. figure:: figs/All.png
    :alt: Comparison of selected models


API Cheatsheet & Reference
==========================

The following APIs are applicable for all detector models for easy use. 


* :func:`pythresh.thresholders.base.BaseDetector.eval`: evaluate outlier score.

Key Attributes of a threshold:

* :attr:`pythresh.thresholders.base.BaseDetector.thres_`: Return the threshold value that seperates inliers from outliers. Outliers are considered all values above this threshold value. Note the threshold value has been derived from normalized scores.

----


.. toctree::
   :maxdepth: 2
   :hidden:
   :caption: Getting Started


   install
   example


.. toctree::
   :maxdepth: 2
   :hidden:
   :caption: Documentation

   api_cc
   pythresh


----


.. rubric:: References

.. bibliography::
   :cited:
   :labelprefix:
   :keyprefix: a-
