import numpy as np
import scipy.stats as stats
from sklearn.utils import check_array
from .base import BaseThresholder
from .thresh_utility import normalize, cut


class BOOT(BaseThresholder):
    r"""BOOT class for Bootstrapping thresholder.

       Use a boostrapping based method to find a non-parametric means
       to threshold scores generated by the decision_scores where outliers
       are set to any value beyond the mean of the confidence intervals.
       See :cite:`martin2006boot` for details
       
       Paramaters
       ----------

       Attributes
       ----------

       thres_ : threshold value that seperates inliers from outliers
       
       Notes
       -----
       
       The two sided bias-corrected and accelerated bootstrap confidence interval 
       is calculated with a confidence level of 0.95. The statistic calculating
       the confidence interval is the standard deviation of the decision 
       scores, with the statistic treating corresponding elements of the 
       samples in the decision scores as paired
       
       The returned upper and lower confidence intervals are used to threshold
       the decision scores. Outliers are set to any value above the mean of the 
       upper and lower confidence intervals. 
       

    """

    def __init__(self):

        pass

    def eval(self, decision):
        """Outlier/inlier evaluation process for decision scores.

        Parameters
        ----------
        decision : np.array or list of shape (n_samples)
                   which are the decision scores from a
                   outlier detection.

        Returns
        -------
        outlier_labels : numpy array of shape (n_samples,)
            For each observation, tells whether or not
            it should be considered as an outlier according to the
            fitted model. 0 stands for inliers and 1 for outliers.
        """

        decision = check_array(decision, ensure_2d=False)

        decision = normalize(decision)

        limit1, limit2 = stats.bootstrap(decision.reshape(1,-1),
                                         np.std, paired=True,
                                         random_state=1234).confidence_interval

        self.thresh_ = (limit1+limit2)/2
        
        return cut(decision, (limit1+limit2)/2)
